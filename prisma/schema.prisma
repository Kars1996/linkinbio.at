// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique

  profile    Profile?
  links      Link[]
  config     Configuration?
  title      Title?
  background Background?
  button     Button?
  topIcon    TopIcon?
  effect     Effect?

  @@map("users")
}

enum Layout {
  CLASSIC
  MINIMAL
}

model Configuration {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  showTopIcons Boolean  @default(false)
  blackText    Boolean?
  hideUsername Boolean?
  font         String?
  layout       Layout?

  user User @relation(fields: [userId], references: [id])

  @@map("configurations")
}

model Profile {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  bio    String?
  title  String?
  image  String?

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Link {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  url      String
  hidden   Boolean
  archived Boolean
  title    String
  order    Int
  iconId   Int

  user User @relation(fields: [userId], references: [id])

  @@map("links")
}

model Background {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique
  configurationId Int     @unique
  url             String?
  color           String?
  startColor      String?
  endColor        String?
  angle           Int?

  user User @relation(fields: [userId], references: [id])

  @@map("backgrounds")
}

model Button {
  id                   Int     @id @default(autoincrement())
  userId               Int     @unique
  configurationId      Int     @unique
  backgroundColor      String
  backgroundBlur       Float
  backgroundOpacity    Float
  backgroundSocialIcon Boolean
  shadowSolid          Boolean
  shadowSpreadRadius   Int
  borderRadius         Int
  borderWidth          Int
  borderColor          String
  contentColor         String
  textHidden           Boolean
  iconHidden           Boolean
  iconShadow           Boolean
  iconSocialColor      Boolean
  iconDropShadow       Boolean

  user User @relation(fields: [userId], references: [id])

  @@map("buttons")
}

model Title {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique
  configurationId Int     @unique
  font            String?
  color           String?

  user User @relation(fields: [userId], references: [id])

  @@map("titles")
}

enum TopIconStyle {
  SOCIAL_COLOR
  SOCIAL_BACKGROUND
  BLACK_BACKGROUND
  WHITE_BACKGROUND
  WHITE_BACKGROUND_SOCIAL_COLOR
}

model TopIcon {
  id         Int           @id @default(autoincrement())
  userId     Int           @unique
  dropShadow Boolean?
  style      TopIconStyle?

  user User @relation(fields: [userId], references: [id])

  @@map("icons")
}

enum WeatherEffect {
  SNOW
  RAIN
  THUNDER
  LIGHTNING_BUGS
  FOG
}

model Effect {
  id                Int            @id @default(autoincrement())
  userId            Int            @unique
  configurationId   Int            @unique
  titleTypewriter   Boolean
  titleSparkles     Boolean
  bioTypewriter     Boolean
  backgroundWeather WeatherEffect?

  user User @relation(fields: [userId], references: [id])

  @@map("visuals")
}
