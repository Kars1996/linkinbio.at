// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  username            String?   @unique
  lastUpdatedUsername DateTime? @map("last_updated_username")
  emailVerified       DateTime? @map("email_verified")
  name                String?
  email               String?   @unique
  bio                 String?
  title               String?
  image               String?
  occupation          String?
  location            String?
  invertTextColor     Boolean?  @map("invert_text_color")
  hideUsername        Boolean?  @map("hide_username")
  views               Int?      @default(0)
  font                String?
  premium             Boolean?  @default(false)
  layout              Layout?   @default(Standard)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  websiteLinks  WebsiteLink[]
  platformLinks PlatformLink[]
  profile       Profile?
  background    Background?
  button        Button?
  topIcon       TopIcon?
  effect        Effect?
  spotify       Spotify?
  youtube       Youtube?
  soundcloud    Soundcloud?

  @@map("users")
}

enum Layout {
  Standard
  Professional
  Glassmorphism
  WithCover
  Bold
}

model WebsiteLink {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @map("user_id") @db.ObjectId
  url      String
  archived Boolean
  title    String
  order    Int
  iconId   Int     @default(0) @map("icon_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("website_links")
}

model PlatformLink {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("user_id") @db.ObjectId
  provider  String  @map("provider")
  username  String  @map("username")
  isTopIcon Boolean @default(false) @map("is_top_icon")
  archived  Boolean
  title     String
  order     Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("platform_links")
}

model Background {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @unique @map("user_id") @db.ObjectId
  url        String?
  color      String?
  startColor String? @map("start_color")
  endColor   String? @map("end_color")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("backgrounds")
}

model Button {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                String  @unique @db.ObjectId
  backgroundColor       String  @map("background_color")
  backgroundBlur        Float   @map("background_blur")
  backgroundOpacity     Float   @map("background_opacity")
  backgroundSocialColor Boolean @map("background_social_icon")
  shadowSolid           Boolean @map("shadow_solid")
  shadowSpreadRadius    Int     @map("shadow_spread_radius")
  shadowColor           String  @map("shadow_color")
  borderRadius          Int     @map("border_radius")
  borderWidth           Int     @map("border_width")
  borderColor           String  @map("border_color")
  textColor             String  @map("text_color")
  textHidden            Boolean @map("text_hidden")
  iconHidden            Boolean @map("icon_hidden")
  iconShadow            Boolean @map("icon_shadow")
  iconSocialColor       Boolean @map("icon_social_color")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("buttons")
}

model Profile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @map("user_id") @db.ObjectId
  titleFont       String?  @map("title_font")
  titleColor      String?  @map("title_color")
  invertTextColor Boolean? @map("invert_text_color")
  hideUsername    Boolean? @map("hide_username")
  textFont        String?  @map("text_font")
  layout          Layout?  @default(Standard)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("profiles")
}

enum TopIconStyle {
  NoBackgroundSocialColor
  SocialBackgroundWhiteColor
  BlackBackgroundWhiteColor
  WhiteBackgroundBlackColor
  WhiteBackgroundSocialColor
}

model TopIcon {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  userId String        @unique @map("user_id") @db.ObjectId
  shadow Boolean?
  style  TopIconStyle?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("icons")
}

enum WeatherEffect {
  Snow
  Rain
  Thunder
  LightningBugs
  Stars
}

model Effect {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @unique @map("user_id") @db.ObjectId
  titleEffect   String?        @map("title_effect")
  weatherEffect WeatherEffect? @map("background_weather")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
  @@map("visuals")
}

enum ContentType {
  Playlist
  Album
  Track
}

model Spotify {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @unique @map("user_id") @db.ObjectId
  contentId      String      @map("content_id")
  type           ContentType
  darkBackground Boolean     @default(false) @map("dark_background")
  compactLayout  Boolean     @default(false) @map("compact_layout")
  enabled        Boolean     @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("spotify")
}

model Youtube {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @unique @map("user_id") @db.ObjectId
  videoId String  @map("video_id")
  enabled Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("youtube")
}

model Soundcloud {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @unique @map("user_id") @db.ObjectId
  trackId String  @map("track_id")
  enabled Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("soundcloud")
}
